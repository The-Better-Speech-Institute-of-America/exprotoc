# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Elixir CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    name: Build and test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Elixir
      uses: erlef/setup-beam@61e01a43a562a89bfc54c7f9a378ff67b03e4a21 # v1.16.0
      with:
        elixir-version: '1.15.2' # [Required] Define the Elixir version
        otp-version: '26.0'      # [Required] Define the Erlang/OTP version
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    - name: Install dependencies
      run: mix deps.get
    - name: Run tests
      run: mix test
            - name: Setup .NET Core SDK
  uses: actions/setup-dotnet@v4.0.0
  with:
    # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx
    dotnet-version: # optional
    # Optional quality of the build. The possible values are: daily, signed, validated, preview, ga.
    dotnet-quality: # optional
    # Optional global.json location, if your global.json isn't located in the root of the repo.
    global-json-file: # optional
    # Optional package source for which to set up authentication. Will consult any existing NuGet.config in the root of the repo and provide a temporary NuGet.config using the NUGET_AUTH_TOKEN environment variable as a ClearTextPassword
    source-url: # optional
    # Optional OWNER for using packages from GitHub Package Registry organizations/users other than the current repository's owner. Only used if a GPR URL is also provided in source-url
    owner: # optional
    # Optional NuGet.config location, if your NuGet.config isn't located in the root of the repo.
    config-file: # optional
    # Optional input to enable caching of the NuGet global-packages folder
    cache: # optional
    # Used to specify the path to a dependency file: packages.lock.json. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
                      - name: Create Artifact YAML
  # You may pin to the exact commit or the version.
  # uses: opencontextinc/create-artifact-yaml@218aadb9180fd982c8f2aaa592573297bdb9550e
  uses: opencontextinc/create-artifact-yaml@v1.0.1
  with:
    # Type of artifact. One of sbom, container, package, or image
    type: 
    # URL/URI of the artifact
    url: 
    # Directory to save YAML files to. If not specified then the directory oc-artifact-yaml will be used.
    directory: # optional
                      - name: Create NuGet Package for Octopus Deploy
  # You may pin to the exact commit or the version.
  # uses: OctopusDeploy/create-nuget-package-action@64e3cec8f57c50b3e7cdfabd006e4d1a24b94f4d
  uses: OctopusDeploy/create-nuget-package-action@v3.0.2
  with:
    # Package Id.
    package_id: 
    # Package version.
    version: 
    # The folder to put the resulting package in, relative to the current working directory; not the base path.
    output_folder: 
    # The base path for the input files.
    base_path: 
    # Multi-line list of files to include in the package. Supports globbing.
    files: 
    # Description to include in the Nuspec file. 
    nuspec_description: 
    # Multi-line list of authors to include in the Nuspec file.
    nuspec_authors: 
    # Release notes to include in the Nuspec file.
    nuspec_release_notes: # optional
          
